library(SUMMER)
data(DemoData)
library(dplyr)
library(ggplot2)
library(patchwork)
summary(DemoData)
head(DemoData[[1]])
data(DemoMap)
geo <- DemoMap$geo
mat <- DemoMap$Amat
head(mat)
head(geo)
matrix(data, nrow = rows, ncol = cols)
mat
mat <- getAmat(geo, geo$REGNAME)
years <- levels(DemoData[[1]]$time)
years <- levels(DemoData[[1]]$time)
data_multi <- getDirectList(births = DemoData,
years = years,
regionVar = "region",
timeVar = "time",
clusterVar = "~cluster+id",
ageVar = "age",
weightsVar = "weights",
geo.recode = NULL)
years <- levels(DemoData[[1]]$time)
data_multi <- getDirectList(births = DemoData,
years = years,
regionVar = "region",
timeVar = "time",
clusterVar = "~clustid+id",
ageVar = "age",
weightsVar = "weights",
geo.recode = NULL)
head(data_multi)
head(DemoData)
head(DemoData[[1]])
head(DemoData[[2]])
tail(DemoData[[1]])
dim(data_multi)
data <- aggregateSurvey(data_multi)
dim(data)
data(BRFSS)
data(KingCounty)
BRFSS <- subset(BRFSS, !is.na(BRFSS$diab2))
BRFSS <- subset(BRFSS, !is.na(BRFSS$hracode))
head(BRFSS)
mat <- getAmat(KingCounty, KingCounty$HRA2010v2)
library(sae)
library(SUMMER)
library(survey)
library(dplyr)
library(tidyr)
library(sf)
library(ggplot2)
if (!isTRUE(requireNamespace("INLA", quietly = TRUE))) {
install.packages("INLA", repos=c(getOption("repos"),
INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
}
data("incomedata")
data("sizeprov")
data("sizeprovedu")
povertyline <- 0.6 * median(incomedata$income) # 6557.143
incomedata$in_poverty <- as.integer(incomedata$income < povertyline)
Popn <- sizeprov[, c("provlab", "Nd")]
sae.DIR <- sae::direct(y = incomedata$in_poverty, dom = incomedata$provlab,
sweight = incomedata$weight, domsize = Popn) |>
select(Domain, Direct, SD)
data("incomedata")
data("sizeprov")
data("sizeprovedu")
povertyline <- 0.6 * median(incomedata$income) # 6557.143
incomedata$in_poverty <- as.integer(incomedata$income < povertyline)
Popn <- sizeprov[, c("provlab", "Nd")]
sae.DIR <- sae::direct(y = incomedata$in_poverty, dom = incomedata$provlab,
sweight = incomedata$weight, domsize = Popn) |>
select(Domain, Direct, SD)
library(sae)
library(SUMMER)
library(survey)
library(tidyr)
if (!isTRUE(requireNamespace("INLA", quietly = TRUE))) {
install.packages("INLA", repos=c(getOption("repos"),
INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
}
library(sae)
sae.DIR <- sae::direct(y = incomedata$in_poverty, dom = incomedata$provlab,
sweight = incomedata$weight, domsize = Popn) |>
select(Domain, Direct, SD)
sae.DIR <- sae::direct(y = incomedata$in_poverty, dom = incomedata$provlab,
sweight = incomedata$weight, domsize = Popn) |>
dplyr::select(Domain, Direct, SD)
incomedata$pop <- sum(sizeprov$Nd[match(incomedata$provlab, sizeprov$provlab)])
design <- survey::svydesign(ids = ~1, weights = ~weight,
data = incomedata, fpc = ~pop)
# estimate area totals
svy.DIR <- survey::svyby(~in_poverty, ~provlab, design, svytotal)
# calculate corresponding area mean estimates
svy.DIR$prov_pop <- sizeprov$Nd[match(svy.DIR$provlab, sizeprov$provlab)]
svy.DIR$Domain <-svy.DIR$provlab
svy.DIR$Direct = svy.DIR$in_poverty/svy.DIR$prov_pop
svy.DIR$SD= svy.DIR$se/svy.DIR$prov_pop
par(pty = "s")
mu.DIR <- mean(sae.DIR$Direct)
sd.DIR <- sd(sae.DIR$Direct)
qqnorm((sae.DIR$Direct - mu.DIR) / sd.DIR, main = "")
abline(0, 1, col = "red")
sae.FH <- sae::mseFH(sae.DIR$Direct~1, sae.DIR$SD^2)
sae.FH.table <- data.frame(
Domain = sae.DIR$Domain,
EBLUP = sae.FH$est$eblup,
RMSE = sqrt(sae.FH$mse)
)
head(sae.FH.table)
# specify known domain sizes
domain.size <- sizeprov[, c("provlab", "Nd")]
colnames(domain.size)[2] <- "size"
# fit model and obtain svysae object
summer.FH <- smoothArea(formula = in_poverty~1,
domain = ~provlab,
design = design,
domain.size = domain.size,
return.samples = T)
## Warning in smoothArea(formula = in_poverty ~ 1, domain = ~provlab, design =
## design, : Direct estimates appear to be proportions. You may want to consider
## using transform = 'logit'.
summer.FH.table <- data.frame(
Domain = sae.DIR$Domain,
Median = summer.FH$iid.model.est$median,
SE = sqrt(summer.FH$iid.model.est$var)
)
head(summer.FH.table)
par(mfrow = c(1, 2))
plot(sae.DIR$Direct, sae.FH$est$eblup,
xlab = "Direct estimates",ylab = "sae package",
xlim=c(min(sae.DIR$Direct, sae.FH$est$eblup),max(sae.DIR$Direct, sae.FH$est$eblup)),
ylim=c(min(sae.DIR$Direct, sae.FH$est$eblup),max(sae.DIR$Direct, sae.FH$est$eblup)),
main = "Small area estimates")
abline(0,1,col="red")
plot(sae.DIR$SD^2, sae.FH$mse,
xlab = "Direct estimates",ylab = "sae package",
xlim=c(min(sae.DIR$SD^2, sae.FH$mse),max(sae.DIR$SD^2, sae.FH$mse)),
ylim=c(min(sae.DIR$SD^2, sae.FH$mse),max(sae.DIR$SD^2, sae.FH$mse)),
main = "Estimates of uncertainty")
abline(0,1,col="red")
par(mfrow = c(1, 2))
plot(sae.FH$est$eblup, summer.FH$iid.model.est$median,
xlab = "sae package",ylab = "SUMMER package",
main = "Small area estimates")
abline(0,1,col="red")
plot(sae.FH$mse,
summer.FH$iid.model.est$var,
xlab = "sae package mse",
ylab = "SUMMER package model variance",
main = "Estimates of mse/variance")
abline(0,1,col="red")
data("grapes")
data("grapesprox")
sae.FH.grapes <- sae::mseSFH(grapehect ~ area + workdays - 1, var, grapesprox, data = grapes)
results <- data.frame(DIR = grapes$grapehect,
eblup.SFH = sae.FH.grapes$est$eblup,
mse = sae.FH.grapes$mse)
# reorder results for comparison later
results$area_name <- paste0('area_', rownames(results))
# create area_name as SUMMER requires rownames of adj.mat to match area variable
grapes$area_name <- paste0('area_', rownames(grapes))
adj.mat.grapes <- as.matrix(grapesprox)
rownames(adj.mat.grapes) <- colnames(adj.mat.grapes) <- grapes$area_name
X_grapes <- grapes[,c('area_name', 'area', 'workdays')]
# format direct estimates for SUMMER
grapes.dir <- grapes[, c(5, 1, 4)]
# scale direct estimates for use with INLA
grapes.dir$grapehect <- grapes.dir$grapehect / 10
grapes.dir$var <- grapes.dir$var/ 100
summer.FH.grapes <- smoothArea(formula = grapehect~area + workdays,
direct.est = grapes.dir, X.domain = X_grapes,
domain = ~area_name, adj.mat = adj.mat.grapes)
plot_list <- plot(summer.FH.grapes, return_list = T)
summer.bym2.est <-
summer.FH.grapes$bym2.model.est[match(rownames(adj.mat.grapes), summer.FH.grapes$bym2.model.est$domain),]
par(mfrow = c(1, 2))
plot(results$eblup.SFH,
summer.bym2.est$median * 10,
xlab = "sae package",
ylab = "SUMMER package",
main = "Small area estimates")
abline(0, 1, col = 'red')
plot(results$mse,
summer.bym2.est$var * 100,
xlab = "sae package mse",
ylab = "SUMMER package model variance",
main = "Estimates of mse/variance")
abline(0, 1, col = 'red')
library(ggplot2)
library(patchwork)
data(BRFSS)
data(KingCounty)
BRFSS <- subset(BRFSS, !is.na(BRFSS$diab2))
BRFSS <- subset(BRFSS, !is.na(BRFSS$hracode))
head(BRFSS)
mat <- getAmat(KingCounty, KingCounty$HRA2010v2_)
design <- svydesign(ids = ~1, weights = ~rwt_llcp,
strata = ~strata, data = BRFSS)
direct <- svyby(~diab2, ~hracode, design, svymean)
direct$var <- direct$se ^ 2
direct$logit.diab2 <- SUMMER::logit(direct$diab2)
direct$logit.var <- direct$var / (direct$diab2 ^ 2 * (1 - direct$diab2) ^ 2)
SFH.brfss <- sae::mseSFH(logit.diab2 ~ 1, logit.var, mat, data = direct)
results <- data.frame(domain = direct$hracode,
eblup.SFH = SUMMER::expit(SFH.brfss$est$eblup),
mse = SFH.brfss$mse)
summer.brfss <- smoothArea(diab2~1, domain= ~hracode,
design = design,
transform = "logit",
adj.mat = mat, level = 0.95)
summer.brfss.alt <- smoothArea(diab2~1, domain= ~hracode,
design = design,
transform = "logit",
adj.mat = mat, level = 0.95,
pc.u = 0.1, pc.alpha = 0.01)
toplot <-  summer.brfss$bym2.model.est
toplot$logit.var <- toplot$var /
(summer.brfss$bym2.model.est$median ^ 2 *
(1 - summer.brfss$bym2.model.est$median) ^ 2)
toplot$median.alt <-  summer.brfss.alt$bym2.model.est$median
toplot$logit.var.alt <-  summer.brfss.alt$bym2.model.est$var /
(summer.brfss.alt$bym2.model.est$median ^ 2 *
(1 - summer.brfss.alt$bym2.model.est$median) ^ 2)
toplot$median.sae <- results$eblup.SFH
toplot$mse.sae <- results$mse
variables <- c("median", "median.alt",  "median.sae",
"logit.var", "logit.var.alt", "mse.sae")
names <- c("Median (default prior)", "Median (new prior)",  "EBLUP (sae)",
"Variance (default prior)", "Variance (new prior)", "MSE (sae)")
mapPlot(data = toplot, geo = KingCounty,
variables=variables[1:3],
labels = names[1:3], by.data = "domain",
by.geo = "HRA2010v2_", size = 0.1)
mapPlot(data = toplot, geo = KingCounty,
variables=variables[4:6], labels = names[4:6],
by.data = "domain", by.geo = "HRA2010v2_", size = 0.1)
par(mfrow = c(1, 2))
range1 <- range(c(direct$diab2,toplot$median.alt))
plot(direct$diab2,toplot$median,
xlab = "direct estimates",
ylab = "model-based estimates",
main = "Small area estimates", col = 'red', pch = 16,
xlim=range1,ylim=range1)
points(direct$diab2,toplot$median.sae,  col = 'blue', pch = 16)
points(direct$diab2,toplot$median.alt,  col = 'cyan', pch = 16)
legend('topleft', pch = 16, col = c('red', 'cyan', 'blue'),
legend = c("SUMMER",'SUMMER (new prior)', "sae"),bty="n")
abline(0,1)
range2 <- range(c(direct$logit.var,toplot$mse.sae,toplot$logit.var.alt))
plot(direct$logit.var,toplot$logit.var,
xlab = "direct estimate var.",
ylab = "model-based uncertainty",
main = "Small area estimates", col = 'red', pch = 16,
xlim=range2,ylim=range2)
points(direct$logit.var,toplot$mse.sae,  col = 'blue', pch = 16)
points(direct$logit.var,toplot$logit.var.alt,  col = 'cyan', pch = 16)
legend('topleft', pch = 16, col = c('red', 'cyan','blue'),
legend = c("SUMMER var.", 'SUMMER var. (new prior)', "sae mse"),bty="n")
abline(0,1)
data("cornsoybean")
head(cornsoybean)
data("cornsoybeanmeans")
Xmean <-
data.frame(cornsoybeanmeans[, c("CountyIndex",
"MeanCornPixPerSeg",
"MeanSoyBeansPixPerSeg")])
head(Xmean)
Popn <-
data.frame(cornsoybeanmeans[, c("CountyIndex",
"PopnSegments")])
head(Popn)
cornsoybean <- cornsoybean[-33, ] # remove outlier
sae.bhf <-
pbmseBHF(CornHec ~ CornPix + SoyBeansPix,
dom = County, meanxpop = Xmean,
popnsize = Popn, B = 200,
data = cornsoybean)
cornsoybean$id <- 1:dim(cornsoybean)[1]
Xsummer <- Xmean
colnames(Xsummer) = c("County", "CornPix", "SoyBeansPix")
des0 <- svydesign(ids = ~1, data = cornsoybean)
## Warning in svydesign.default(ids = ~1, data = cornsoybean): No weights or
## probabilities supplied, assuming equal probability
summer.bhf.unit <- smoothUnit(formula = CornHec ~ CornPix + SoyBeansPix,
family = "gaussian",
domain = ~County,
design = des0, X.pop = Xsummer,
pc.u = 1000, pc.alpha = 0.01, level = 0.95)
## Warning in smoothUnit(formula = CornHec ~ CornPix + SoyBeansPix, family =
## "gaussian", : No spatial information provided, using iid domain effects
library(sae)
library(SUMMER)
library(survey)
library(dplyr)
library(tidyr)
library(sf)
library(ggplot2)
if (!isTRUE(requireNamespace("INLA", quietly = TRUE))) {
install.packages("INLA", repos=c(getOption("repos"),
INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
}
data("incomedata")
data("sizeprov")
data("sizeprovedu")
povertyline <- 0.6 * median(incomedata$income) # 6557.143
incomedata$in_poverty <- as.integer(incomedata$income < povertyline)
# Load data
data("incomedata")
data("sizeprov")
data("sizeprovedu")
# Create a variable that represents whether the individual is below or above the poverty line
povertyline <- 0.6 * median(incomedata$income) # 6557.143
incomedata$in_poverty <- as.integer(incomedata$income < povertyline)
head(incomedata)
nrow(incomedata)
Popn <- sizeprov[, c("provlab","Nd")]
sae.DIR <- sae::direct(y = incomedata$in_poverty,
dom = incomedata$provlab,
sweight = incomedata$weight,
domsize = Popn) %>%
dplyr::select(Domain, Direct, SD)
head(sae.DIR)
table(incomedata$provlab)
incomedata$pop <- sum(sizeprov$Nd[match(incomedata$provlab,
sizeprov$provlab)])
head(incomedata)
?svydesign
# Estimate area totals
svy.DIR <- survey::svyby(~in_poverty,
~provlab,
design,
svytotal)
# Estimate area totals
svy.DIR <- survey::svyby(~in_poverty, ~provlab,
design,
svytotal)
incomedata$pop <- sum(sizeprov$Nd[match(incomedata$provlab,
sizeprov$provlab)])
# This specifies the survey characteristics
design <- survey::svydesign(ids = ~1,
weights = ~weight,
data = incomedata,
fpc = ~pop)
# Estimate area totals
svy.DIR <- survey::svyby(~in_poverty, ~provlab,
design,
svytotal)
incomedata$pop <- sum(sizeprov$Nd[match(incomedata$provlab,
sizeprov$provlab)])
# This specifies the survey characteristics
design <- survey::svydesign(ids = ~1,
weights = ~weight,
data = incomedata,
fpc = ~pop)
# Estimate area totals
svy.DIR <- survey::svyby(~in_poverty,
~provlab,
design,
svytotal)
# Claculate corresponding area mean estimates
svy.DIR$prov_pop <- sizeprov$Nd[match(svy.DIR$provlab,
sizeprov$provlab)]
svy.DIR$Domain <- svy.DIR$provlab
svy.DIR$Direct = svy.DIR$in_poverty / svy.DIR$prov_pop
svy.DIR$SD = svy.DIR$se / svy.DIR$prov_pop
head(svy.DIR)
head(svy.DIR)
incomedata$pop <- sum(sizeprov$Nd[match(incomedata$provlab,
sizeprov$provlab)])
# This specifies the survey characteristics
design <- survey::svydesign(ids = ~1,
weights = ~weight,
data = incomedata,
fpc = ~pop)
# Estimate area totals
svy.DIR <- survey::svyby(~in_poverty,
~provlab,
design,
svytotal)
# # Claculate corresponding area mean estimates
# svy.DIR$prov_pop <- sizeprov$Nd[match(svy.DIR$provlab,
#                                       sizeprov$provlab)]
# svy.DIR$Domain <- svy.DIR$provlab
# svy.DIR$Direct = svy.DIR$in_poverty / svy.DIR$prov_pop
# svy.DIR$SD = svy.DIR$se / svy.DIR$prov_pop
head(svy.DIR)
incomedata$pop <- sum(sizeprov$Nd[match(incomedata$provlab,
sizeprov$provlab)])
# This specifies the survey characteristics
design <- survey::svydesign(ids = ~1,
weights = ~weight,
data = incomedata,
fpc = ~pop)
# Estimate area totals
svy.DIR <- survey::svyby(~in_poverty,
~provlab,
design,
svytotal)
# Claculate corresponding area mean estimates
svy.DIR$prov_pop <- sizeprov$Nd[match(svy.DIR$provlab,
sizeprov$provlab)]
svy.DIR$Domain <- svy.DIR$provlab
svy.DIR$Direct = svy.DIR$in_poverty / svy.DIR$prov_pop
svy.DIR$SD = svy.DIR$se / svy.DIR$prov_pop
head(svy.DIR)
data(grapes)
head(grapes)
data(grapesprox)
head(grapesprox)
setwd( '/Users/cpeiretgarcia/Library/CloudStorage/OneDrive-UniversityCollegeLondon/MRES Supervision/HowTo/how_to_dissertation')
